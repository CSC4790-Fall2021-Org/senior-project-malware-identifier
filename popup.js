document.addEventListener('DOMContentLoaded', function () {

	 document.getElementById('activateBtn').addEventListener('click', process)
	 
	 function process() {
		 const div = document.createElement('div')
		 const div2 = document.createElement('div')
		  getMD5(
		    document.getElementById("fileinput").files[0],
		    prog => div.textContent = ("Progress: " + prog)
		  ).then(
			res => div.textContent = res,
		    err => div.textContent = err
		  );
		 document.body.appendChild(div)
		}

		function readChunked(file, chunkCallback, endCallback) {
		  var fileSize   = file.size;
		  var chunkSize  = 4 * 1024 * 1024; // 4MB
		  var offset     = 0;
		  
		  var reader = new FileReader();
		  reader.onload = function() {
		    if (reader.error) {
		      endCallback(reader.error || {});
		      return;
		    }
		    offset += reader.result.length;
		    chunkCallback(reader.result, offset, fileSize); 
		    if (offset >= fileSize) {
		      endCallback(null);
		      return;
		    }
		    readNext();
		  };

		  reader.onerror = function(err) {
		    endCallback(err || {});
		  };

		  function readNext() {
		    var fileSlice = file.slice(offset, offset + chunkSize);
		    reader.readAsBinaryString(fileSlice);
		  }
		  readNext();
		}

		function getMD5(blob, cbProgress) {
		  return new Promise((resolve, reject) => {
		    var md5 = CryptoJS.algo.MD5.create();
		    readChunked(blob, (chunk, offs, total) => {
		      md5.update(CryptoJS.enc.Latin1.parse(chunk));
		      if (cbProgress) {
		        cbProgress(offs / total);
		      }
		    }, err => {
		      if (err) {
		        reject(err);
		      } else {
		        var hash = md5.finalize();
		        var hashHex = hash.toString(CryptoJS.enc.Hex);
		        resolve(hashHex);
		      }
		    });
		  });
		}

		function postData(input) {
			malwareDetection(input)
		}

	 
}, false)